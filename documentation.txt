Hi me ,
This file is created entirely for my reference 

Tutorials i referred to:

1. Abhijeet-DJango Course 2023
https://youtu.be/zprmnhW6sYU?si=l_6cD0UIdaJokHwb

the first step is to check django version if its installed so 
import django
django.__version__ 
 in your python interpreter.

NExt to create a project in djangohit this into your folder:
django-admin startproject firstapp or firstproject

next you can see a folder been created 
structure:
firstapp>>
firstapp>init.py>asgi>wsgi>urls>settings
next a sep folder called manage.py


next create an app: cd projectdirectory

python manage.py startapp appname

python manage.py startapp home 
it creates same directory like your proj directory and
apps.py,views file, models for dbases file,tests.py,admin.py,
for :
AUTHENTICATIONS
FUNCTIONALITIES / MODULES are stored in APPS which are reusable ex : accounts , home , cart etc.

SERVER :
python manage.py runserver  
or custom your port:
python manage.py runserver 0.0.0.0:5000


APPS:
 to let django know :
 you have to mention ur apps in settings.py 
 Installed apps: you can directly add here or :

 EXTERNAL_APPS =[
    'home'
 ]

 INSTALLED_APPS += EXTERNAL_APPS



 How to create a template?
 HTML

 all logical part thats the data to be sent is in views.py
 and urls for routing 


 So firstly create a function in your views thats the logic or data that u  want to display..

check the function in home directory's views.py

 and link this function to your urls to access them..

Below is an example to show a JSON response:

import json
from django.http import HttpResponse

def my_view(request):
    data = {
        'name': 'GeeksForGeeks',
      	'startedIn': 2009,
        'city': 'Noida'
    }
    response = HttpResponse(json.dumps(data), content_type='application/json')
    return response


path('',home,name='welcomepage')


To render a html template:

use render
 return render(request,"index.html")

Always create your html css js in TEMPLATES/static/ directory because django has some pre-built settings related to templates or else you gotta add this file to your TEmplates/Scriptsettings. to be added at the end of s in settings for django to know...

To link your pages in NAV BAR always use dynamic urls {% url 'name' %} and name in your path-
path('',home,name='home')

TEMPLATE ENGINE:

it is used to enclose dynamic code to your html file beginhhning with {%%} and ending with {end__}

for ex:
Go to your views and in the function try to pass some list of data like:
chocolates =[
  'FiveStar','GoneMad','KitKat','Munch'
]
We always use CONTEXT to pass data from backend to render it ..

return render(request,index.html,context={'chocolates':chocolates})


ALso follow Do not repeat yourself by displaying same html content everywhere :
by creating a BASE.html
then load that html 
{% extends "BASE.html" %} 
in rest of your files...

also you have to enclose the common code in a block named of your choice..
{% block samecontent %}

Home Contact About Logout/Loginkf
Welcome to this page that page.

{% endblock %}

then place this block code in the rest of ur files.


check other templats in django documentation

MODELS:

A structure of your database.

from django.db import models 
fields and types pf data in db:
 
 class yourschemaname(models.Model):#takes model class

example:
class Student(models.Model):
  column = object.datatype()
  name=models.CharField(max_length=20) # stores character type data with limit 20
  age = models.IntegerField() #takes age as number typee
  email = models.EmailField(null=True,blank=True) # text email
  address=models.TextField(null=True,blank=True) # text allows empty 
  img = models.ImageField()
  docs = models.FileField()

models. #will give you the list like checkconstraint/count/date/foreignkey/etc
id=models.AutoField() # autogenerated by django its also a primary key for a table 

Migrations:
python manage.py makemigrations
always use this whenever you create your own model.
Django uses SQLite by default and you have to register your model in that database.
Download SQLite Viewer.
then open ur dbsqlite from files
then hit command 
python manage.py makemigrations

python manage.py migrate #for django builtin tables 

What happens when u delete the migrated files from ur folder dbsqlite?
-django stores the models migrations in its own database so it gets to know that u have deleted a file and throws an error.

How does django know exactly where the changes have happened?
- django generates a state and compares it with current structure of database 

Interscting eith database (CRUD using SHELL):

python manage.py shell

from home.models import * #from appname import functions
#importing model structure

student = Student name(name="Abhijeet",age=10,email="abhijeet@gmail.com",address="bangalore")
print(student)
#class is initialised with student object but it does not save it so to save
student.save()
print(student)

or
create() is used as a model manager
student = Student.objects.create(name="Brisk",age=22,address="Bangalore")
student.save()

or
diction = {"name":"SNEHA","age":20,"address":"Switzerland"}
Student.objects.create(**diction)


Testing the data/print data:

Student.objects.all() #returns all objects with that model structure 
Student.objects.all[0] #returns first object thats ABhijeet
Student.objects.all[1]#Brisk

Student.objects.all()[0].email #abhijeet@gmail.com
Student.objects.all()[1].name #Brisk

create a function inside your model declaration called :

class Studentclass(models.Model):
  column = object.datatype()
  name=models.CharField(max_length=20) # stores character type data with limit 20
  age = models.IntegerField() #takes age as number typee
  email = models.EmailField(null=True,blank=True) # text email
  address=models.TextField(null=True,blank=True) # text allows empty 
  img = models.ImageField()
  docs = models.FileField()

  def __str__(self) -> str:
    return self.name         #will print all the names of student objects 

or use for loop to iterate :
  for students in student :
    print(f"Student name {student.name}, of age {student.age}")

If you want to test a function from your folder that is dependent on Django utilities then its not possible to simply run the file therefore you have to go to the django shell and only then you can run that file/call that function

Helps in testing single files

studentobj=Studentclass.objects.get(name)
print(studentobj)


UPDATE:
 
studentobj=Studentclass.objects.filter(id=1)
studentobj.name="Anant"

studentobj=Studentclass.objects.filter(id=1).update(name="Anant")


DEL:

Studentclass.objects.get(id=1).delete()
Studentclass.objects.all().delete()


USING SHELL for ADMIN GROUPS:
python manage.py shell

activate shell,

from django.contrib.auth.models import Group
Group.objects.get_or_create(name='Admins')
from django.contrib.auth.models import User, Group

user = User.objects.get(username='example_username')
admin_group = Group.objects.get(name='Admins')
user.groups.add(admin_group)


def login_view(request):
    if request.method == 'POST':
        form = LoginForm(data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)

            # Check if the user is in the Admins group
            if user.groups.filter(name='Admins').exists():
                return redirect('adminn')  # Redirect to admin page
            return redirect('profile')  # Redirect to profile page
    else:
        form = LoginForm()
    return render(request, 'login.html', {'form': form})


from django.contrib.auth.decorators import user_passes_test

def is_admin(user):
    return user.groups.filter(name='Admins').exists()

@login_required(login_url="/login/")
@user_passes_test(is_admin)
def adminn(request):
  pass

>>> print(admin_group)
Admins
>>> admin_users = admin_group.user_set.all()
>>> for admin_user in admin_users:
...     print(admin_user.username)
...
sneh


